(defun hash-symbol (symbol)
  (declare (type symbol symbol))
  (sxhash symbol))
(defun funcall-test (func)
  (declare (type (function () (values)) func))
  (funcall func))
(defparameter foob
  `(progn
     (declaim (inline floop))
     (defun floop ()
       (print 345))
     (declaim (notinline floop))
     (values #'floop)))
(declaim (inline test234))
(defun test234 ()
  (floop)
  (floop)
  (floop))
(declaim (notinline test234))
;;;;sbcl does retarded checks when one wants to set a symbol's value cell
;;;;so this function bypasses it
;;;;setvq means "set VALUE quoted"
(declaim (inline setvq))
(defun setvq (symbol new)
  #+sbcl (sb-kernel:%set-symbol-global-value symbol new)
  #-sbcl (set symbol new))
(defun wtf3 (symbol new)
  (sb-kernel:%set-symbol-global-value symbol new))
(defun test234other ()
  (locally (declare (inline floop test234))
    (test234)
    (floop)
    (floop))
  (floop))
(defun set5 (symbol)
  (declare (type symbol symbol)
	   (optimize (speed 3) (safety 0)))
  (sb-impl::%set-symbol-value symbol 5))
(defstruct astruct
  symbol)
(declaim (inline ssetvq))
(defun ssetvq (astruct new)
  (setf (astruct-symbol astruct) new))
(defun wtf? (symbol)
  (declare (type symbol symbol))
  (let ((a symbol))
    (dotimes (X 10000000) (setvq a x)) a))
(defparameter wof nil)
(defun wtf2? ()
  (dotimes (X 10000000) (set 'wop x)))
(defun test56 (a b)
  (declare (type fixnum a b))
  (let ((c (+ a b)))
    (declare (type fixnum c))
    c))
(defun make-cons (num)
  (cons num (sxhash num)))
(defun make-cons-hash ()
  (make-hash-table :test 'eq :hash-function #'cdr))
(defun wtf (num)
  (declare (type fixnum num)
	   
	   (optimize (speed 3) (safety 0)))
  (let ((a 123))
    (declare (type (unsigned-byte 64) a))
    (the fixnum (* a num))))
 
(progn
  (declaim (ftype (function ((simple-bit-vector 128) (simple-bit-vector 128)) t)
		  bit-vector-equal))
  (with-unsafe-speed
    (defun bit-vector-equal (a b)
      (equal a b))))

(defun test= (a b)
  (declare (type symbol a b)
	   (optimize (speed 3) (safety 0)))
  (eq a b))
