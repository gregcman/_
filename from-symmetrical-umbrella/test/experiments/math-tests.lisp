(defun stirling (n)
  (* (truncate (sqrt (* 2 pi n)))
     (expt (truncate (/ n (exp 1))) n)))
(defun fucke (n)
  (+ (* n (log n)) (- n) (* 1/2 (log (* 2 pi n)))))
(defun hashpop (pop size)
  (let ((large (fucke size))
	(small (fucke (- size pop))))
    (let ((val (- large small))
	  (other (* pop (log size))))
      (let ((exponent (- val other)))
	(print exponent)
	(print (* 100 (- 1 (exp exponent))))))))
